# 📘 Docker 개념 정리

> 이 문서는 Docker 기본/중급 개념을 스터디하며 정리한 내용입니다.  
> 개인 학습 및 블로그/포트폴리오 공유용으로 활용 가능합니다.  

---

## 📑 목차
1. [컨테이너와 호스트 간 파일 복사](#1-컨테이너와-호스트-간-파일-복사)
2. [볼륨 마운트](#2-볼륨-마운트)
   - [바인드 마운트](#21-바인드-마운트-bind-mount)
   - [볼륨 마운트](#22-볼륨-마운트-volume-mount)
3. [이미지 생성](#3-이미지-생성)
4. [컨테이너 커스텀](#4-컨테이너-커스텀)
5. [Docker Hub & 사설 레지스트리](#5-docker-hub--사설-레지스트리)
6. [Docker Compose](#6-docker-compose)
7. [핵심 키워드 요약](#-핵심-키워드-요약)

---
* `##` 같은 제목 태그 
* `-` 같은 리스트 태그 
* 코드 블럭 닫는 \`\`\` 태그


## 1. 컨테이너와 호스트 간 파일 복사

- **명령어**:
  ```bash
  docker cp <호스트경로> <컨테이너ID:경로>
  docker cp <컨테이너ID:경로> <호스트경로>

---

## ✅ 깔끔하게 고친 README.md (전체 Markdown 스타일 적용)

````markdown
# 📘 Docker 개념 정리

---

## 1. 컨테이너와 호스트 간 파일 복사

- **명령어**:
  ```bash
  docker cp <호스트경로> <컨테이너ID:경로>
  docker cp <컨테이너ID:경로> <호스트경로>
````

* **특징**:

  * 호스트 ↔ 컨테이너 간 파일 교환 가능
  * 컨테이너: `containerID:경로`
  * 호스트: 절대경로 사용 권장

---

## 2. 볼륨 마운트

### 2.1 바인드 마운트 (Bind Mount)

* **개념**: 호스트 OS의 디렉토리/파일을 컨테이너에 직접 연결
* **장점**:

  * 접근 및 수정이 쉽고, 호스트 파일을 그대로 활용 가능
  * 개발 시 소스코드 실시간 반영 가능
* **사용 예시**:

  * 로컬 개발 환경에서 소스코드 동기화

### 2.2 볼륨 마운트 (Volume Mount)

* **개념**: Docker가 관리하는 스토리지 영역을 컨테이너에 연결
* **장점**:

  * OS 의존성이 없음 → 컨테이너 독립적 사용 가능
  * 데이터 퍼시스턴스 보장 (컨테이너 삭제 후에도 데이터 유지)
  * Docker 공식 권장 방식
* **단점**:

  * 수정/백업 시 절차가 상대적으로 복잡
  * 컨테이너 경유 후 접근해야 하는 경우 많음
* **사용 예시**:

  * DB 데이터
  * 로그 보관
  * 삭제되면 안 되는 중요 파일

---

## 3. 이미지 생성

* 동일한 환경에서 다수 컨테이너 실행 가능
* 개발/운영 환경 세팅 시 일관성 있는 배포 환경 제공

---

## 4. 컨테이너 커스텀

* **개념**: 기본 이미지에서 필요한 요소만 추가/삭제하여 맞춤 환경 생성
* **장점**:

  * 불필요한 요소 제거 → 경량화
  * 프로젝트 특화 환경 구성 가능

---

## 5. Docker Hub & 사설 레지스트리

* **Docker Hub**:

  * 공개 이미지 저장소 (GitHub와 유사)
  * 전 세계 사용자와 이미지 공유 가능
* **Private Registry (사설 레지스트리)**:

  * 기업/조직 내부 이미지 관리
  * 보안 강화, 내부 배포 최적화

---

## 6. Docker Compose

* **개념**: 여러 컨테이너를 한 번에 관리하는 도구
* **활용 예시**:

  * `WordPress + Apache + MySQL` 같은 멀티 컨테이너 서비스 실행
  * 개발/운영 환경 분리 관리

---

## 🔑 핵심 키워드 요약

* **파일 복사**: `docker cp`
* **볼륨 마운트**: 데이터 퍼시스턴스, OS 의존성 없음
* **이미지 생성**: 환경 일관성 유지
* **컨테이너 커스텀**: 최적화된 환경 제공
* **Docker Hub / Private Registry**: 이미지 관리 플랫폼
* **Docker Compose**: 멀티 컨테이너 환경 구성

---
✍️ *정리자: jhj3487*
📅 *최종 업데이트: 2025-08-27*

```
