---

````markdown
# 📘 Docker 개념 정리

> 이 문서는 Docker 기본/중급 개념을 스터디하며 정리한 내용입니다.  
> 개인 학습 및 블로그/포트폴리오 공유용으로 활용 가능합니다.  

---

## 📑 목차
1. [컨테이너와 호스트 간 파일 복사](#1-컨테이너와-호스트-간-파일-복사)  
2. [볼륨 마운트](#2-볼륨-마운트)  
   - [바인드 마운트](#21-바인드-마운트-bind-mount)  
   - [볼륨 마운트](#22-볼륨-마운트-volume-mount)  
   - [볼륨 확인 방법](#23-볼륨-확인-방법)  
   - [볼륨 백업](#24-볼륨-백업)  
3. [이미지 생성](#3-이미지-생성)  
   - [Dockerfile 기본 명령어](#31-dockerfile-기본-명령어)  
4. [컨테이너 커스텀](#4-컨테이너-커스텀)  
5. [Docker Hub & 사설 레지스트리](#5-docker-hub--사설-레지스트리)  
6. [Docker Compose](#6-docker-compose)  
7. [핵심 키워드 요약](#-핵심-키워드-요약)  

---

## 1. 컨테이너와 호스트 간 파일 복사

- **명령어**:
  ```bash
  docker cp <호스트경로> <컨테이너ID:경로>
  docker cp <컨테이너ID:경로> <호스트경로>
````

* **특징**:

  * 호스트 ↔ 컨테이너 간 파일 교환 가능
  * 컨테이너: `containerID:경로`
  * 호스트: 절대경로 사용 권장

---

## 2. 볼륨 마운트

* **마운트란?**

  * 실제 경로는 다르지만, 컨테이너 내부에서 \*\*“바로가기 버튼”\*\*을 만드는 개념
  * → 윈도우 바탕화면 바로가기와 유사

* 컨테이너 실행 시 `docker run -v` 옵션으로 사용 가능

### 2.1 바인드 마운트 (Bind Mount)

```bash
docker run -v /호스트/경로:/컨테이너/경로 <이미지>
```

* **개념**: 호스트 OS의 디렉토리/파일을 컨테이너에 직접 연결
* **장점**: 접근 및 수정이 쉽고, 개발 시 소스코드 실시간 반영 가능
* **사용 예시**: 로컬 개발 환경에서 소스코드 동기화

---

### 2.2 볼륨 마운트 (Volume Mount)

```bash
docker run -v 볼륨명:/컨테이너/경로 <이미지>
```

* **개념**: Docker가 관리하는 스토리지 영역을 컨테이너에 연결

* **장점**:

  * OS 의존성 없음 → 컨테이너 독립적 사용 가능
  * 데이터 퍼시스턴스 보장 (컨테이너 삭제 후에도 데이터 유지)
  * Docker 공식 권장 방식

* **단점**: 백업/수정 절차가 상대적으로 복잡

* **사용 예시**: DB 데이터, 로그 보관, 삭제되면 안 되는 중요 파일

---

### 2.3 볼륨 확인 방법

```bash
# 볼륨 자체 확인
docker volume inspect <볼륨명>

# 컨테이너에 연결된 볼륨 확인
docker container inspect <컨테이너명>
```

* 다른 컨테이너(Linux OS)에서 볼륨을 마운트해 확인할 수도 있으나 보통은 inspect 명령어 사용

---

### 2.4 볼륨 백업

```bash
docker run --rm \
  -v <볼륨명>:/source \
  -v $(pwd):/backup \
  ubuntu tar czvf /backup/backup.tar.gz -C /source .
```

* 컨테이너는 **정지/종료 상태**여야 함

---

## 3. 이미지 생성

### (1) 실행 중인 컨테이너 → 이미지 추출

```bash
docker commit <컨테이너명> <이미지명>
```

* 현재 컨테이너 상태를 그대로 이미지로 저장
* 단점: Dockerfile 기록이 없어 재현성이 떨어짐

---

### (2) Dockerfile 로 이미지 생성

```bash
docker build -t <이미지명> <Dockerfile 경로>
```

* Dockerfile 기반으로 이미지 빌드
* **재현성 확보 + 버전 관리 가능** → 실무 표준 방식

---

### (3) 이미지 이동

* tar 파일로 저장/복원

  ```bash
  docker save -o myimage.tar <이미지명>
  docker load -i myimage.tar
  ```
* Registry (Docker Hub/Private Registry) 활용

  * `docker push` / `docker pull`

---

### 3.1 Dockerfile 기본 명령어

| 명령어          | 설명                              | 예시                                              |
| ------------ | ------------------------------- | ----------------------------------------------- |
| `FROM`       | 베이스 이미지 지정                      | `FROM ubuntu:20.04`                             |
| `RUN`        | 이미지 빌드 과정에서 명령 실행               | `RUN apt-get update && apt-get install -y curl` |
| `COPY`       | 호스트 파일 → 이미지에 복사                | `COPY ./app /usr/src/app`                       |
| `ADD`        | COPY와 유사, but 압축 해제/URL 다운로드 가능 | `ADD app.tar.gz /app`                           |
| `WORKDIR`    | 컨테이너 내부 작업 디렉토리 설정              | `WORKDIR /usr/src/app`                          |
| `CMD`        | 컨테이너 실행 시 실행할 명령 (1개)           | `CMD ["java", "-jar", "app.jar"]`               |
| `ENTRYPOINT` | 컨테이너 실행 시 고정 실행 명령              | `ENTRYPOINT ["python3"]`                        |
| `EXPOSE`     | 컨테이너가 열 포트 선언                   | `EXPOSE 8080`                                   |
| `ENV`        | 환경 변수 설정                        | `ENV APP_ENV=prod`                              |
| `VOLUME`     | 볼륨 마운트 지점 지정                    | `VOLUME /data`                                  |

---

## 4. 컨테이너 커스텀

* **개념**: 기본 이미지에서 필요한 요소만 추가/삭제하여 맞춤 환경 생성
* **장점**: 불필요한 요소 제거 → 경량화, 프로젝트 특화 환경 구성

---

### 4.1 컨테이너 개조 방법

1. **파일 복사/마운트**

   * `docker cp` (호스트 ↔ 컨테이너 파일 교환)
   * `-v` 옵션 (디렉토리 마운트)

2. **컨테이너 내부 접근**

   * 실행 중인 컨테이너 진입:

     ```bash
     docker exec -it <컨테이너명> /bin/bash
     ```

     👉 실행 중인 서비스는 그대로 두고 제어 가능
   * 새 컨테이너 생성 후 진입:

     ```bash
     docker run -it <이미지명> /bin/bash
     ```

     👉 이 경우 기존 서비스 실행 불가 → 서비스 재시작 필요

---

### 4.2 Docker 공식 추천 베이스 이미지

* 리눅스 배포판 중 **Debian 계열**을 권장
* 이유: 안정성과 경량화가 균형 잡혀 있음

---

## 5. Docker Hub & 사설 레지스트리

* **Docker Hub**: 공개 이미지 저장소 (GitHub와 유사)
* **Private Registry**: 기업/조직 내부 이미지 관리 → 보안 강화, 내부 배포 최적화

# 📘 Docker Hub & Registry 정리

---

### 5.1 Docker Hub 개념
- `docker run` 명령어로 컨테이너 실행 시, **도커 허브(Docker Hub)** 에서 이미지를 다운로드 받아 실행한다.
- 사용자는 **Docker Hub**에 이미지를 업로드(push) 할 수 있고,  
  - **공개(Public)** 형태로 공유 가능  
  - **비공개(Private)** 형태로 제한적으로 사용 가능

---

### 5.2 Docker Hub vs Registry
- **Docker Hub**: 대표적인 공개 레지스트리 서비스  
- **Docker Registry**: 도커 이미지를 저장/배포하는 시스템  
  - Registry 안에는 **Repository** 단위로 이미지가 구성됨  
  - GitHub의 리포지토리처럼 → Docker Registry는 **이미지 형상 관리 서비스**  
- GitHub를 사내에 직접 구축하듯이 → Docker Registry도 **사내 전용 구축 가능**  
  - 예: `docker registry` 컨테이너 실행해서 내부용 Registry 구축 가능  

---

### 5.3 이미지 업로드 과정
이미지를 Docker Hub 또는 Private Registry에 올리려면 **태그(tag)** 를 붙여야 한다.

```bash
docker tag <기존이미지명> <레지스트리주소>/<리포지토리명>:<버전>
```

```bash
docker tag symverse www.dockerhubsym.com/symverse:1
```

symverse : 로컬에 있는 이미지 이름
www.dockerhubsym.com : 레지스트리 주소
symverse : 리포지토리 이름
:1 : 태그(버전)

### 5.4 업로드 (Push)
태그된 이미지를 레지스트리에 업로드한다.

```bash
docker push www.dockerhubsym.com/symverse:1
```
기본값(Default): Public 공개 업로드
Private Repository로 설정하면 내부에서만 사용 가능

---

## 6. Docker Compose

### 6.1 개념 

* 개발/운영 환경 분리 관리* Docker Compose는 **Docker 클라이언트 툴**로,
  여러 컨테이너(서비스)를 하나의 YAML 파일(`docker-compose.yml`)로 정의하고
  명령어 한 번으로 실행/종료할 수 있는 자동화 도구
  
 * 활용 예시 : `WordPress + Apache + MySQL` 멀티 컨테이너 서비스 실행

* 정의할 수 있는 요소:

  * 이미지(Image)
  * 컨테이너(Container)
  * 네트워크(Network)
  * 볼륨(Volume)

### 6.2 주요 명령어

* **up**: 서비스 실행 (이미지 풀 + 컨테이너 생성 + 네트워크/볼륨 연결)

  ```bash
  docker-compose up -d
  ```
* **down**  
  - 실행 중인 컨테이너와 네트워크를 종료 후 **삭제**  
  - 단, **이미지와 볼륨은 기본적으로 삭제되지 않음**  
  - 필요 시 옵션을 추가해야 함:
    - `--volumes` : 볼륨까지 삭제  
    - `--rmi all` : 관련 이미지까지 삭제  
  ```bash
  docker-compose down
  docker-compose down --volumes
  docker-compose down --rmi al
  ```
* **stop**: 컨테이너/네트워크 종료 (삭제는 안 함)

  ```bash
  docker-compose stop
  ```

### 6.3 Dockerfile과 차이

* **Dockerfile**: 이미지 빌드 정의 파일
* **Docker Compose**: 여러 컨테이너 서비스 실행 정의 파일

### 6.4 Kubernetes와 차이

* Compose: 단일 서버/개발·테스트 환경에 적합
* Kubernetes: 멀티 서버, 자동 확장, 운영 환경 적합

### 6.5 설치 및 파일명

* Docker Engine과는 별개 소프트웨어 (클라이언트 툴)
* 최근 Docker Desktop에는 기본 포함
* 기본 파일명: `docker-compose.yml`
* 다른 파일명 사용 시 `-f` 옵션 필요

  ```bash
  docker-compose -f docker-compose.dev.yml up
  ```

### 6.6 Docker Compose 활용 범위

### ✅ 적합한 경우

* Jenkins, SonarQube, Grafana, Prometheus 같은 **보조 서비스 실행**
* 단일 서버에서 여러 컨테이너를 한 번에 실행해야 하는 **개발/테스트 환경**
* 빠른 PoC(Proof of Concept) 또는 로컬 개발 환경 구성

### ⚠️ 한계점 (실제 서비스 운영 시)

* 멀티 서버 확장(스케일 아웃) 불가
* 노드 장애 복구 자동화 없음
* 컨테이너 상태 관리 및 헬스체크 자동화 부족
* 고가용성, 무중단 배포 등 운영 환경에서 필요한 기능 부족

### 🚀 대안

* **운영(Production) 환경**에서는 Kubernetes, Docker Swarm 같은 컨테이너 오케스트레이션 도구 사용 권장
* Docker Compose는 **개발·테스트용 자동화 툴**로 활용하는 것이 일반적

---

## 🔑 핵심 키워드 요약

* **파일 복사**: `docker cp`
* **볼륨 마운트**: 데이터 퍼시스턴스, OS 의존성 없음
* **이미지 생성**: `commit`(임시), `Dockerfile`(실무 표준)
* **이미지 이동**: `docker save` → tar 파일, Registry
* **컨테이너 커스텀**: `exec`(실행 중 진입), `run`(새 실행, 기존 서비스 중단됨)
* **Dockerfile 명령어**: `FROM`, `RUN`, `COPY`, `ADD`, `CMD`, `ENTRYPOINT`, `EXPOSE`, `ENV`, `VOLUME`
* **베이스 이미지**: Debian 계열 권장
* **Docker Hub**: 대표적인 공개 레지스트리, 이미지 업로드/다운로드 가능
* **Private Registry**: 사내 전용 이미지 저장소, `docker registry` 컨테이너로 구축 가능
* **이미지 업로드**: `docker tag` → `docker push`
* **Docker Compose**: YAML 기반 다중 컨테이너 실행 자동화 도구 (개발/테스트 환경 적합)

---

✍️ *정리자: 7AAB*
📅 *최종 업데이트: 2025-08-27*

---
